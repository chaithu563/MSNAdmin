///<reference path="./jaydata.d.ts" />

/*//////////////////////////////////////////////////////////////////////////////////////
////// Autogenerated by JaySvcUtil.exe http://JayData.org for more info        /////////
//////                      oData  V3  TypeScript                              /////////
//////////////////////////////////////////////////////////////////////////////////////*/


declare module MSNAdmin.Models {
  export class CITY extends $data.Entity {
    constructor();
    constructor(initData: { ID?: string; NAME?: string; CITYAREAs?: MSNAdmin.Models.CITYAREA[]; USERINFOes?: MSNAdmin.Models.USERINFO[]; });
    ID: string;
    NAME: string;
    CITYAREAs: MSNAdmin.Models.CITYAREA[];
    USERINFOes: MSNAdmin.Models.USERINFO[];
    
  }
  
  export class CITYAREA extends $data.Entity {
    constructor();
    constructor(initData: { ID?: string; NAME?: string; DESCRIPTION?: string; CITYID?: string; CITY?: MSNAdmin.Models.CITY; USERINFOes?: MSNAdmin.Models.USERINFO[]; });
    ID: string;
    NAME: string;
    DESCRIPTION: string;
    CITYID: string;
    CITY: MSNAdmin.Models.CITY;
    USERINFOes: MSNAdmin.Models.USERINFO[];
    
  }
  
  export class MEMBERSHIP extends $data.Entity {
    constructor();
    constructor(initData: { ID?: string; NAME?: string; DESCRIPTION?: string; USERMEMBERSHIPs?: MSNAdmin.Models.USERMEMBERSHIP[]; });
    ID: string;
    NAME: string;
    DESCRIPTION: string;
    USERMEMBERSHIPs: MSNAdmin.Models.USERMEMBERSHIP[];
    
  }
  
  export class SERVICEBID extends $data.Entity {
    constructor();
    constructor(initData: { ID?: string; USERID?: string; USERSERVICENEEDID?: string; BIDTITLE?: string; BIDDESCRIPTION?: string; BIDAMOUNT?: string; USERINFO?: MSNAdmin.Models.USERINFO; USERSERVICENEED?: MSNAdmin.Models.USERSERVICENEED; USERSERVICENEEDs?: MSNAdmin.Models.USERSERVICENEED[]; });
    ID: string;
    USERID: string;
    USERSERVICENEEDID: string;
    BIDTITLE: string;
    BIDDESCRIPTION: string;
    BIDAMOUNT: string;
    USERINFO: MSNAdmin.Models.USERINFO;
    USERSERVICENEED: MSNAdmin.Models.USERSERVICENEED;
    USERSERVICENEEDs: MSNAdmin.Models.USERSERVICENEED[];
    
  }
  
  export class SERVICECATEGORY extends $data.Entity {
    constructor();
    constructor(initData: { ID?: string; NAME?: string; DESCRIPTION?: string; SERVICESUBCATEGORies?: MSNAdmin.Models.SERVICESUBCATEGORY[]; USERSERVICEs?: MSNAdmin.Models.USERSERVICE[]; USERSERVICENEEDs?: MSNAdmin.Models.USERSERVICENEED[]; });
    ID: string;
    NAME: string;
    DESCRIPTION: string;
    SERVICESUBCATEGORies: MSNAdmin.Models.SERVICESUBCATEGORY[];
    USERSERVICEs: MSNAdmin.Models.USERSERVICE[];
    USERSERVICENEEDs: MSNAdmin.Models.USERSERVICENEED[];
    
  }
  
  export class SERVICESTATE extends $data.Entity {
    constructor();
    constructor(initData: { ID?: number; NAME?: string; DESCRIPTION?: string; USERSERVICENEEDs?: MSNAdmin.Models.USERSERVICENEED[]; });
    ID: number;
    NAME: string;
    DESCRIPTION: string;
    USERSERVICENEEDs: MSNAdmin.Models.USERSERVICENEED[];
    
  }
  
  export class SERVICESUBCATEGORY extends $data.Entity {
    constructor();
    constructor(initData: { ID?: string; NAME?: string; DESCRIPTION?: string; SERVICECATEGORYID?: string; SERVICECATEGORY?: MSNAdmin.Models.SERVICECATEGORY; USERSERVICEs?: MSNAdmin.Models.USERSERVICE[]; USERSERVICENEEDs?: MSNAdmin.Models.USERSERVICENEED[]; });
    ID: string;
    NAME: string;
    DESCRIPTION: string;
    SERVICECATEGORYID: string;
    SERVICECATEGORY: MSNAdmin.Models.SERVICECATEGORY;
    USERSERVICEs: MSNAdmin.Models.USERSERVICE[];
    USERSERVICENEEDs: MSNAdmin.Models.USERSERVICENEED[];
    
  }
  
  export class SERVICETIMETYPE extends $data.Entity {
    constructor();
    constructor(initData: { ID?: number; NAME?: string; DESCRIPTION?: string; USERSERVICENEEDs?: MSNAdmin.Models.USERSERVICENEED[]; });
    ID: number;
    NAME: string;
    DESCRIPTION: string;
    USERSERVICENEEDs: MSNAdmin.Models.USERSERVICENEED[];
    
  }
  
  export class SOCIALLOGIN extends $data.Entity {
    constructor();
    constructor(initData: { ID?: number; NAME?: string; DESCRIPTION?: string; USERINFOes?: MSNAdmin.Models.USERINFO[]; });
    ID: number;
    NAME: string;
    DESCRIPTION: string;
    USERINFOes: MSNAdmin.Models.USERINFO[];
    
  }
  
  export class USERBID extends $data.Entity {
    constructor();
    constructor(initData: { ID?: string; USERID?: string; BIDS?: number; USERINFO?: MSNAdmin.Models.USERINFO; });
    ID: string;
    USERID: string;
    BIDS: number;
    USERINFO: MSNAdmin.Models.USERINFO;
    
  }
  
  export class USERFUND extends $data.Entity {
    constructor();
    constructor(initData: { ID?: string; USERID?: string; BALANCE?: string; USERINFO?: MSNAdmin.Models.USERINFO; });
    ID: string;
    USERID: string;
    BALANCE: string;
    USERINFO: MSNAdmin.Models.USERINFO;
    
  }
  
  export class USERINFO extends $data.Entity {
    constructor();
    constructor(initData: { ID?: string; NAME?: string; EMAIL?: string; PHONE?: string; CITYID?: string; CITYAREAID?: string; LOGINTYPEID?: number; CURRENTLOCATION?: string; CITY?: MSNAdmin.Models.CITY; CITYAREA?: MSNAdmin.Models.CITYAREA; SERVICEBIDs?: MSNAdmin.Models.SERVICEBID[]; SOCIALLOGIN?: MSNAdmin.Models.SOCIALLOGIN; USERBIDS?: MSNAdmin.Models.USERBID[]; USERFUNDS?: MSNAdmin.Models.USERFUND[]; USERMEMBERSHIPs?: MSNAdmin.Models.USERMEMBERSHIP[]; USERSERVICEs?: MSNAdmin.Models.USERSERVICE[]; USERSERVICENEEDs?: MSNAdmin.Models.USERSERVICENEED[]; });
    ID: string;
    NAME: string;
    EMAIL: string;
    PHONE: string;
    CITYID: string;
    CITYAREAID: string;
    LOGINTYPEID: number;
    CURRENTLOCATION: string;
    CITY: MSNAdmin.Models.CITY;
    CITYAREA: MSNAdmin.Models.CITYAREA;
    SERVICEBIDs: MSNAdmin.Models.SERVICEBID[];
    SOCIALLOGIN: MSNAdmin.Models.SOCIALLOGIN;
    USERBIDS: MSNAdmin.Models.USERBID[];
    USERFUNDS: MSNAdmin.Models.USERFUND[];
    USERMEMBERSHIPs: MSNAdmin.Models.USERMEMBERSHIP[];
    USERSERVICEs: MSNAdmin.Models.USERSERVICE[];
    USERSERVICENEEDs: MSNAdmin.Models.USERSERVICENEED[];
    
  }
  
  export class USERMEMBERSHIP extends $data.Entity {
    constructor();
    constructor(initData: { ID?: string; USERID?: string; MEMBERSHIPID?: string; COMMENTS?: string; MEMBERSHIP?: MSNAdmin.Models.MEMBERSHIP; USERINFO?: MSNAdmin.Models.USERINFO; });
    ID: string;
    USERID: string;
    MEMBERSHIPID: string;
    COMMENTS: string;
    MEMBERSHIP: MSNAdmin.Models.MEMBERSHIP;
    USERINFO: MSNAdmin.Models.USERINFO;
    
  }
  
  export class USERSERVICE extends $data.Entity {
    constructor();
    constructor(initData: { ID?: string; USERID?: string; SERVICECATEGORYID?: string; SERVICESUBCATEGORYID?: string; SERVICECATEGORY?: MSNAdmin.Models.SERVICECATEGORY; SERVICESUBCATEGORY?: MSNAdmin.Models.SERVICESUBCATEGORY; USERINFO?: MSNAdmin.Models.USERINFO; });
    ID: string;
    USERID: string;
    SERVICECATEGORYID: string;
    SERVICESUBCATEGORYID: string;
    SERVICECATEGORY: MSNAdmin.Models.SERVICECATEGORY;
    SERVICESUBCATEGORY: MSNAdmin.Models.SERVICESUBCATEGORY;
    USERINFO: MSNAdmin.Models.USERINFO;
    
  }
  
  export class USERSERVICENEED extends $data.Entity {
    constructor();
    constructor(initData: { ID?: string; USERID?: string; SERVICELOCATION?: string; SERVICETITLE?: string; SERVICEDESCRIPTION?: string; SERVICECATEGORYID?: string; SERVICESUBCATEGORYID?: string; MINBUDGET?: string; MAXBUDGET?: string; SERVICESTATE?: number; SERVICETIMETYPE?: number; SERVICENEEDEDDATE?: Date; ALLOCATEDBIDID?: string; SERVICEBIDs?: MSNAdmin.Models.SERVICEBID[]; SERVICEBID?: MSNAdmin.Models.SERVICEBID; SERVICECATEGORY?: MSNAdmin.Models.SERVICECATEGORY; SERVICESTATE1?: MSNAdmin.Models.SERVICESTATE; SERVICESUBCATEGORY?: MSNAdmin.Models.SERVICESUBCATEGORY; SERVICETIMETYPE1?: MSNAdmin.Models.SERVICETIMETYPE; USERINFO?: MSNAdmin.Models.USERINFO; });
    ID: string;
    USERID: string;
    SERVICELOCATION: string;
    SERVICETITLE: string;
    SERVICEDESCRIPTION: string;
    SERVICECATEGORYID: string;
    SERVICESUBCATEGORYID: string;
    MINBUDGET: string;
    MAXBUDGET: string;
    SERVICESTATE: number;
    SERVICETIMETYPE: number;
    SERVICENEEDEDDATE: Date;
    ALLOCATEDBIDID: string;
    SERVICEBIDs: MSNAdmin.Models.SERVICEBID[];
    SERVICEBID: MSNAdmin.Models.SERVICEBID;
    SERVICECATEGORY: MSNAdmin.Models.SERVICECATEGORY;
    SERVICESTATE1: MSNAdmin.Models.SERVICESTATE;
    SERVICESUBCATEGORY: MSNAdmin.Models.SERVICESUBCATEGORY;
    SERVICETIMETYPE1: MSNAdmin.Models.SERVICETIMETYPE;
    USERINFO: MSNAdmin.Models.USERINFO;
    
  }
  
}

declare module Default {
  export class Container extends $data.EntityContext {
    onReady(): $data.IPromise;
    onReady(handler: (context: Container) => void): $data.IPromise;
    
    CITies: $data.EntitySet<MSNAdmin.Models.CITY>;
    CITYAREAs: $data.EntitySet<MSNAdmin.Models.CITYAREA>;
    MEMBERSHIPs: $data.EntitySet<MSNAdmin.Models.MEMBERSHIP>;
    SERVICEBIDs: $data.EntitySet<MSNAdmin.Models.SERVICEBID>;
    SERVICECATEGORies: $data.EntitySet<MSNAdmin.Models.SERVICECATEGORY>;
    SERVICESTATEs: $data.EntitySet<MSNAdmin.Models.SERVICESTATE>;
    SERVICESUBCATEGORies: $data.EntitySet<MSNAdmin.Models.SERVICESUBCATEGORY>;
    SERVICETIMETYPEs: $data.EntitySet<MSNAdmin.Models.SERVICETIMETYPE>;
    SOCIALLOGINs: $data.EntitySet<MSNAdmin.Models.SOCIALLOGIN>;
    USERBIDS: $data.EntitySet<MSNAdmin.Models.USERBID>;
    USERFUNDS: $data.EntitySet<MSNAdmin.Models.USERFUND>;
    USERINFOes: $data.EntitySet<MSNAdmin.Models.USERINFO>;
    USERMEMBERSHIPs: $data.EntitySet<MSNAdmin.Models.USERMEMBERSHIP>;
    USERSERVICEs: $data.EntitySet<MSNAdmin.Models.USERSERVICE>;
    USERSERVICENEEDs: $data.EntitySet<MSNAdmin.Models.USERSERVICENEED>;
    
  }

}
